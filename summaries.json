{
  "analyze-dotnet-memory-snapshots-with-dotmemory": "本文介绍了如何使用 dotMemory 工具分析 .NET 程序的内存快照，特别是在 Linux 服务器上生成和分析内存快照的步骤。文章详细说明了如何通过 `dotnet-dump` 工具生成内存快照，并将其导入 dotMemory 进行分析。还介绍了 dotMemory 中的一些关键功能，如按类型和实例分类查看内存对象。此外，文章还提到了一些可能遇到的问题及其解决方法，如导入快照失败的情况。",
  "blazor-unocss-integration": "本文介绍了如何在 Blazor 项目中集成 UnoCSS，以实现原子化 CSS 的开发方式。通过创建 Blazor 项目、安装 UnoCSS 并配置 `uno.config.ts` 文件，开发者可以生成所需的 CSS 文件并在 Blazor 项目中引用。文章还详细说明了如何使用 `npx unocss --watch` 和 `dotnet watch` 实现热重载，从而在修改 Razor 文件时自动更新样式，提升开发效率。",
  "cpp-unit-testing-using-google-test": "本文介绍了如何在 C++ 项目中使用 GoogleTest 进行单元测试。首先，文章讲解了如何通过下载源码、Git Clone 或 Git Submodule 的方式将 GoogleTest 添加到项目中，并详细说明了如何修改 CMakeLists.txt 文件以集成 GoogleTest。接着，文章展示了如何编写测试代码，包括创建测试文件和编写测试用例。最后，文章提供了通过命令行和 IDE（如 CLion）执行测试的步骤，并展示了测试结果的输出示例。通过这些步骤，开发者可以有效地为 C++ 项目编写和运行单元测试，确保代码的可靠性。",
  "deploy-aspnetcore-on-aliyun-fc": "本文介绍了如何使用阿里云函数计算（Serverless）低成本部署 ASP.NET Core 应用。Serverless 架构具有运维成本低、按需计费、弹性扩容等优势，特别适合不需要持续后台任务的接口服务。文章详细讲解了从创建 ASP.NET Core 项目、准备运行时、创建层、部署函数到外网访问和自定义域名的完整流程。通过阿里云函数计算，用户可以以极低的成本部署和运行 ASP.NET Core 应用，尤其适合轻量级接口服务。",
  "enable-moonlight-native-touch": "Moonlight Android 端实际上已经支持原生触控功能，但由于与三指打开键盘的功能冲突，该功能在源码中被注释掉了。通过修改 `Game.java` 文件中的相关代码，取消注释后即可启用原生触控支持。启用后，用户可以在设置中关闭 “将触控屏作为触摸板使用” 选项，从而享受更流畅的原生触控体验。这一修改在局域网环境下提供了接近 Windows 平板的操作体验。",
  "manually-compile-aseprite": "本文介绍了如何在 Windows 平台上手动编译像素画软件 Aseprite 的步骤。由于 Aseprite 在 Steam 上售价较高，作者选择通过 GitHub 上的开源代码自行编译。文章详细列出了编译前的准备工作，包括安装 Visual Studio、Cmake、Ninja 以及下载 Skia-m96 和 Aseprite 源码。随后，作者提供了具体的编译步骤，包括使用 Cmake 和 Ninja 进行编译，并提到了如何汉化和更新 Aseprite。虽然手动编译过程较为复杂，但对于预算有限的用户来说，这是一种经济实惠的选择。",
  "memories-of-yukichan-arcaea-module": "这篇文章回顾了暮雪酱 Arcaea 查分模块的开发历程，从最初的 lancelot 到暮雪酱的诞生与迭代，最终因 lowiro 对 ArcaeaUnlimitedAPI 的封禁而停止服务。作者详细描述了每个阶段的功能开发、技术选择以及遇到的挑战，特别是从 Node.js 转向 .NET/C# 的技术转型。文章还表达了对用户和开发社区的感谢，并宣布暮雪酱的开源。尽管查分功能停止，作者认为这段经历是值得的，因为它为用户带来了帮助和价值。",
  "pku-geekgame-2023-writeup": "这篇文章是作者参加第三届北京大学信息安全综合能力竞赛（PKU GeekGame 3rd）的解题记录和总结。作者详细描述了自己在比赛中的解题思路和过程，涵盖了多个题目，包括 “一眼盯帧”、“小北问答”、“猫咪状态监视器”、“基本功”、“麦恩・库拉夫特”、“简单的打字稿”、“非法所得” 等。作者通过使用工具如 FFmpeg、bkcrack、Wireshark 等，成功解决了部分题目，并在过程中学到了许多网络安全相关的知识。尽管有些题目未能完全解决，但作者表示这次比赛让他对 CTF 有了更深的理解，并期待未来的比赛。",
  "raspberrypi-4b-arch": "本文详细介绍了如何在树莓派 4B 上安装 Arch Linux ARM 操作系统。文章从准备工作开始，包括使用 Linux 设备进行分区和格式化 SD 卡，接着下载并解压 Arch Linux ARM 的 rootfs 包，配置启动文件和 fstab，最后通过 SSH 连接到树莓派并进行系统配置。此外，文章还提供了可选配置步骤，如更改默认用户名、安装 yay 包管理器、基本软件包、oh-my-zsh 及其插件，以及连接 WiFi 的方法。通过这些步骤，用户可以成功在树莓派 4B 上安装并配置 Arch Linux ARM。",
  "raspberrypi-ftp-server": "本文介绍了如何在树莓派上搭建一个 FTP 服务器，以实现局域网内的文件共享。文章首先解释了 FTP 的基本概念，并对比了 FTP 与其他文件传输协议的优缺点。接着，详细描述了在树莓派上安装和配置 `vsftpd` 软件包的过程，包括设置用户权限、配置文件的修改以及如何启动 FTP 服务。此外，文章还提供了如何从不同设备连接到 FTP 服务器的指导，并分享了作者在实际使用中的体验。最后，针对可能遇到的问题，如无法登录 FTP Shell 和创建文件夹失败等，提供了解决方案。",
  "sign-git-commit-with-gpg": "这篇文章介绍了如何使用 GPG（GNU Privacy Guard）为 Git Commit 签名，并在 GitHub 上显示 “Verified” 标识。文章首先解释了 GPG 的基本概念和用途，接着详细描述了如何在 Windows 下生成 GPG 密钥，并配置 Git 以使用该密钥进行签名。此外，文章还介绍了如何将 GPG 公钥导入 GitHub，以便 GitHub 能够识别并验证签名。最后，文章还提供了如何信任 GitHub 的 GPG 公钥的附加步骤，以确保所有提交的签名都能被验证。通过这些步骤，用户可以在 GitHub 上获得 “Verified” 标识，增强提交的可信度。",
  "skiasharp-type-initializer-exception": "在树莓派上重新部署 bot 时，遇到 SkiaSharp 的 `TypeInitializationException` 异常，提示 `SKImageInfo` 类型初始化失败。经过排查，发现原因是系统缺少 `libfontconfig` 库，导致字体相关操作无法完成。通过安装 `extra/fontconfig` 包后，问题得到解决，图片生成功能恢复正常。",
  "smapi-install": "本文介绍了如何在 Windows 平台上安装星露谷模组加载器 SMAPI。首先需要从 SMAPI 官网下载最新版本的安装包，解压后运行安装脚本。如果脚本无法自动检测到游戏安装路径，需要手动输入路径。安装完成后，如果使用 Steam 启动游戏，还需要设置启动项以确保能正常获得成就。最后，文章提醒在配置 Steam 启动项之前，确保游戏路径中没有中文字符。",
  "ubuntu-desktop-mac-style": "这篇教程详细介绍了如何将 Ubuntu Desktop 系统美化为 Mac 风格。首先，通过安装 `gnome-tweaks` 工具和浏览器插件，用户可以管理主题和扩展。接着，使用 `Dash to Dock` 插件增强 Dock 栏的功能。然后，通过克隆并安装 `WhiteSur-gtk-theme` 主题，用户可以自定义主题模式、颜色、侧边栏宽度、图标等。此外，教程还介绍了如何美化 Firefox 浏览器、Dash to Dock 和锁屏界面。最后，通过安装 `WhiteSur-icon-theme` 图标主题，用户可以进一步美化系统图标。教程适用于 Ubuntu Desktop 18.04 及以上版本。",
  "use-docker-cli-in-windows": "本文介绍了如何在 Windows 环境下通过 WSL（Windows Subsystem for Linux）使用 Docker CLI 的方法。首先，通过 winget 安装 Docker CLI，然后在 WSL 中安装 Docker Engine。接着，配置 WSL 中的 Docker 以允许 TCP 远程访问，并通过编辑 systemd 配置文件实现。最后，在 Windows 中配置 Docker CLI 以默认连接到 WSL 中的 Docker daemon，从而实现在 Windows 命令行中直接使用 Docker CLI 操作 WSL 中的 Docker 服务。这种方法避免了使用较重的 Docker Desktop，同时提高了操作的便捷性。",
  "use-vuetify-in-vitepress": "本文介绍了如何在 VitePress 项目中集成 Vuetify 组件库。首先，创建了一个新的 VitePress 项目，并通过 `enhanceApp` 函数将 Vuetify 实例接入 Vue App。接着，详细说明了如何配置 Vuetify 以支持 SSR 渲染，并解决了在打包和预览过程中遇到的常见问题。最后，提供了完整的配置文件作为参考，帮助开发者顺利在 VitePress 中使用 Vuetify 组件库。",
  "vscode-leetcode-with-csharp": "这篇文章详细介绍了如何使用 Visual Studio Code (VSCode) 配置一个适合 LeetCode 刷题的 C# 开发环境。文章首先介绍了如何安装必要的 VSCode 扩展，包括 C# 语言支持和 LeetCode 刷题扩展。接着，文章详细说明了如何配置 LeetCode 扩展和 .NET 环境，包括如何自定义文件生成路径、创建 `csproj` 文件以启用代码提示等。此外，文章还介绍了如何配置调试环境，以便在本地调试 LeetCode 题解。最后，文章提供了一些小技巧，如使用 code snippets 来简化代码编写过程。通过这些步骤，用户可以在 VSCode 中高效地进行 LeetCode 刷题。",
  "vscode-sdcc-mcs51-development": "本文介绍了如何使用 VSCode 和 SDCC（Small Device C Compiler）来搭建一个舒适的 51 单片机开发环境，替代传统的 Keil µVision 4。文章详细说明了如何安装和配置 SDCC 和 VSCode，包括设置编译器路径和编辑配置文件。通过一个 LED 闪烁的示例代码，展示了如何在 VSCode 中编写和编译 51 单片机程序，并最终生成可烧录的 .hex 文件。文章还提到了一些需要注意的细节，如代码提示的 hack 和中断定义的不同格式。整体上，这种配置提供了比 Keil 更现代化的开发体验。",
  "wsl2-arch": "本文详细介绍了如何在 Windows Subsystem for Linux 2 (WSL2) 上部署 Arch Linux 环境。文章首先介绍了准备工作，包括确保 Windows 版本符合要求、启用 WSL 和虚拟机平台功能，并下载 WSL 内核更新包。接着，通过下载 ArchWSL 项目中的 Arch.zip 文件并解压，安装 Arch Linux。文章还指导了如何创建默认用户、配置 Pacman 软件包管理器、安装 yay 包管理器以及 oh-my-zsh 框架，以提升命令行使用体验。整个过程旨在帮助用户在 WSL2 上搭建一个功能完善的 Arch Linux 环境。",
  "most-used-linq-methods": "本文总结了 C# 中常用的 LINQ 方法，包括 `Select`、`Where`、`OrderBy`、`First`、`Any`、`All` 和 `Take` 等。LINQ 是一种语言集成查询技术，允许开发者以类似 SQL 的方式操作集合。文章还介绍了 LINQ 的懒执行特性，即 LINQ 操作只有在实际使用时才会执行计算。此外，文章还提到了 LINQ 的扩展方法形式，并推荐了官方文档以供进一步学习。"
}